[project]
name = "stone-brick-toolkit"
version = "0.6.3"
description = "Stone Brick is a toolkit providing some commonly used utilities."
authors = [
    {name = "Yanli",email = "mail@yanli.one"},
]

requires-python = ">=3.9"
readme = "README.md"
license = {text = "MIT"}
urls = {"Repository"= "https://github.com/BeautyyuYanli/Stone-Brick-Toolkit"}

dependencies = []

[project.optional-dependencies]
all = [
    "stone-brick-toolkit[llm, retry, observability, auth-all]",
]
llm = [
    "stone-brick-toolkit[retry]",
    "openai>=1.55.1",
]
retry = [
    "tenacity>=8.5.0",
]
observability = [
    "opentelemetry-api>=1.28.2",
]
encryptlib = [
    "pydantic>=2.10.3",
    "pyjwt>=2.10.1",
]
oauthlogin = [
    "pydantic>=2.10.3",
]
oauthlogin-google = [
    "stone-brick-toolkit[oauthlogin]",
    "anyio>=4.7.0",
    "google-api-python-client>=2.155.0",
    "google-auth-oauthlib>=1.2.1",
]
oauthlogin-all = [
    "stone-brick-toolkit[auth-oauth-google]",
]



[build-system]
requires = ["pdm-backend"]
build-backend = "pdm.backend"

[tool.pyright]
venvPath = ".venv"

[tool.ruff]
target-version = "py39"
exclude = [".venv"]
[tool.ruff.lint]
select = ["E", "F", "G", "B", "I", "SIM", "TID", "PL", "RUF"]
ignore = [
    "RUF001",  # 'ï¼Œ' vs. ','
    "RUF003",  # Ambiguous unicode character comment
    "E501",    # Line too long
    "E402",    # Module level import not at top of file
    "PLR0911", # Too many return statements
    "PLR0912", # Too many branches
    "PLR0913", # Too many arguments in function definition
    "PLR0915", # Too many statements
    "SIM105",  # Use `contextlib.suppress(Exception)` instead of `try`-`except`-`pass`
    "SIM102",  # Use a single `if` statement instead of nested `if` statements
]

[tool.ruff.lint.isort]
known-first-party = ["stone_brick"]


[tool.pytest.ini_options]
log_cli_level = "INFO"

[tool.pdm]
distribution = true

[tool.pdm.dev-dependencies]
dev = [
    "ruff>=0.8.1",
    "python-dotenv>=1.0.1",
    "pytest>=8.3.3",
    "rich>=13.9.4",
    "logfire>=2.5.0",
    "fastapi>=0.115.6",
]


[tool.pdm.scripts]
fix = { shell = "ruff check --fix && ruff format" }
check = { shell = 'ruff check && ruff format --check' }


